{
  "version": "experimental",
  "tags": [
    {
      "name": "ft-widget",
      "path": "./ft-widget.js",
      "attributes": [
        {
          "name": "name",
          "description": "The name to say \"Hello\" to.",
          "type": "string",
          "default": "\"World\""
        },
        {
          "name": "count",
          "description": "The number of times the button has been clicked.",
          "type": "number",
          "default": "0"
        }
      ],
      "properties": [
        {
          "name": "name",
          "attribute": "name",
          "description": "The name to say \"Hello\" to.",
          "type": "string",
          "default": "\"World\""
        },
        {
          "name": "count",
          "attribute": "count",
          "description": "The number of times the button has been clicked.",
          "type": "number",
          "default": "0"
        },
        {
          "name": "renderRoot",
          "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.",
          "type": "HTMLElement | ShadowRoot"
        },
        {
          "name": "isUpdatePending",
          "type": "boolean"
        },
        {
          "name": "hasUpdated",
          "type": "boolean"
        },
        {
          "name": "updateComplete",
          "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
          "type": "Promise<boolean>"
        }
      ]
    },
    {
      "name": "ft-connect-to-your-account",
      "path": "./components/ft-connect-to-your-account/ft-connect-to-your-account.js",
      "properties": [
        {
          "name": "renderRoot",
          "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.",
          "type": "HTMLElement | ShadowRoot"
        },
        {
          "name": "isUpdatePending",
          "type": "boolean"
        },
        {
          "name": "hasUpdated",
          "type": "boolean"
        },
        {
          "name": "updateComplete",
          "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
          "type": "Promise<boolean>"
        }
      ]
    },
    {
      "name": "ft-connection-list-item",
      "path": "./components/ft-connection-list-item/ft-connection-list-item.js",
      "attributes": [
        {
          "name": "selected",
          "description": "Whether the item should appear selected, or not.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "connection",
          "type": "object",
          "default": "{\"id\":\"1\",\"accountId\":\"1\",\"attemptDate\":\"2016-03-15T01:05:34+00:00\",\"checkedDate\":\"2016-04-15T01:05:24+00:00\",\"documentCount\":1,\"enabled\":true,\"fetchAll\":false,\"historicalPeriod\":\"30\",\"info\":\"\",\"logoUrl\":\"https://filethis.com/static/logos/72/Logo_FileThisHosted.png\",\"name\":\"Untitled\",\"period\":\"2d\",\"sourceId\":\"1\",\"state\":\"waiting\",\"successDate\":\"2016-03-15T01:05:14+00:00\",\"tries\":0,\"validation\":\"done\"}"
        }
      ],
      "properties": [
        {
          "name": "selected",
          "attribute": "selected",
          "description": "Whether the item should appear selected, or not.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "connection",
          "attribute": "connection",
          "type": "object",
          "default": "{\"id\":\"1\",\"accountId\":\"1\",\"attemptDate\":\"2016-03-15T01:05:34+00:00\",\"checkedDate\":\"2016-04-15T01:05:24+00:00\",\"documentCount\":1,\"enabled\":true,\"fetchAll\":false,\"historicalPeriod\":\"30\",\"info\":\"\",\"logoUrl\":\"https://filethis.com/static/logos/72/Logo_FileThisHosted.png\",\"name\":\"Untitled\",\"period\":\"2d\",\"sourceId\":\"1\",\"state\":\"waiting\",\"successDate\":\"2016-03-15T01:05:14+00:00\",\"tries\":0,\"validation\":\"done\"}"
        },
        {
          "name": "renderRoot",
          "description": "Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.",
          "type": "HTMLElement | ShadowRoot"
        },
        {
          "name": "isUpdatePending",
          "type": "boolean"
        },
        {
          "name": "hasUpdated",
          "type": "boolean"
        },
        {
          "name": "updateComplete",
          "description": "Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.",
          "type": "Promise<boolean>"
        }
      ]
    }
  ]
}